type Event {
  id: ID
  ownerId: String
  startDate: String!
  endDate: String
  lastModifiedDate: String
  createdDate: String
  name: String!
  description: String
  eventStatus : EventStatus
  ticketTypes : [TicketType]
}

input EventInput {
  id: String
  ownerId: String
  startDate: String
  endDate: String
  lastModifiedDate: String
  createdDate: String
  name: String!
  description: String
  eventStatus : EventStatus
}

fragment FullEvent on Event{
  id
  ownerId
  name
  description
  startDate
  endDate
  createdDate
  lastModifiedDate
  eventStatus
  ticketTypes{
    id
    price
    title
  }
}

type TicketType {
  id : String!
  price : Float!
  title : String!
  description : String
  lastModifiedDate : String
  createdDate : String
}

input TicketTypeInput {
  id : String
  price : Float!
  title : String!
  description : String
  lastModifiedDate : String
  createdDate : String
}

fragment FullTicketType on TicketType{
  id
  price
  title
  description
  lastModifiedDate
  createdDate
}

type Mutation {
  createEvent(input: EventInput!): Event!
  updateEvent(eventId: String!, input: EventInput!): Event!
}

type Query {
  eventsByOwnerId(ownerId: String!): [Event!]!
  eventById(id: String!): Event
  ticketsByEventId(eventId : String!) : TicketType!
  ticketsByEventIdAndTicketId(eventId : String!, typeId : String!, Input : TicketTypeInput!) : TicketType
}


enum EventStatus{
  SCHEDULED
  IN_PROGRESS
  TERMINATED
  CANCELLED
}
